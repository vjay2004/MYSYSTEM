-- ===============================
-- Northern Highlands Resort: Reservation System
-- ERD with Separate Roles
-- ===============================

-- 1. GUEST
CREATE TABLE Guest (
    GuestID INT AUTO_INCREMENT PRIMARY KEY,
    FullName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    ContactNumber VARCHAR(20),
    Address VARCHAR(255)
);

-- 2. FRONT DESK STAFF
CREATE TABLE Staff (
    StaffID INT AUTO_INCREMENT PRIMARY KEY,
    FullName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    ContactNumber VARCHAR(20)
);

-- 3. ADMIN
CREATE TABLE Admin (
    AdminID INT AUTO_INCREMENT PRIMARY KEY,
    FullName VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL
);

-- 4. ROOM
CREATE TABLE Room (
    RoomID INT AUTO_INCREMENT PRIMARY KEY,
    RoomNumber VARCHAR(10) UNIQUE NOT NULL,
    RoomType VARCHAR(50) NOT NULL,
    Description TEXT,
    PricePerNight DECIMAL(10,2) NOT NULL,
    Status ENUM('Available', 'Occupied', 'Maintenance') DEFAULT 'Available',
    UpdatedByAdminID INT,
    FOREIGN KEY (UpdatedByAdminID) REFERENCES Admin(AdminID)
);

-- 5. FUNCTION HALL
CREATE TABLE FunctionHall (
    HallID INT AUTO_INCREMENT PRIMARY KEY,
    HallName VARCHAR(100) NOT NULL,
    Capacity INT NOT NULL,
    PricePerHour DECIMAL(10,2) NOT NULL,
    Description TEXT,
    Status ENUM('Available', 'Reserved', 'Maintenance') DEFAULT 'Available',
    UpdatedByAdminID INT,
    FOREIGN KEY (UpdatedByAdminID) REFERENCES Admin(AdminID)
);

-- 6. ROOM RESERVATION
CREATE TABLE RoomReservation (
    ReservationID INT AUTO_INCREMENT PRIMARY KEY,
    GuestID INT NOT NULL,
    RoomID INT NOT NULL,
    StaffID INT NOT NULL, -- staff who processed
    CheckInDate DATE NOT NULL,
    CheckOutDate DATE NOT NULL,
    TotalPrice DECIMAL(10,2) NOT NULL,
    Status ENUM('Pending', 'Confirmed', 'Cancelled', 'Completed') DEFAULT 'Pending',
    FOREIGN KEY (GuestID) REFERENCES Guest(GuestID),
    FOREIGN KEY (RoomID) REFERENCES Room(RoomID),
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

-- 7. EVENT RESERVATION
CREATE TABLE EventReservation (
    EventID INT AUTO_INCREMENT PRIMARY KEY,
    GuestID INT NOT NULL,
    HallID INT NOT NULL,
    StaffID INT NOT NULL, -- staff who processed
    EventDate DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    EventPurpose VARCHAR(255),
    TotalPrice DECIMAL(10,2) NOT NULL,
    Status ENUM('Pending', 'Confirmed', 'Cancelled', 'Completed') DEFAULT 'Pending',
    FOREIGN KEY (GuestID) REFERENCES Guest(GuestID),
    FOREIGN KEY (HallID) REFERENCES FunctionHall(HallID),
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

-- 8. PAYMENT
CREATE TABLE Payment (
    PaymentID INT AUTO_INCREMENT PRIMARY KEY,
    StaffID INT NOT NULL, -- staff who processed payment
    ReservationType ENUM('Room', 'Event') NOT NULL,
    ReservationRefID INT NOT NULL, -- Can point to RoomReservation or EventReservation
    AmountPaid DECIMAL(10,2) NOT NULL,
    PaymentDate DATETIME NOT NULL,
    PaymentMethod ENUM('Cash', 'Card', 'Online') NOT NULL,
    Status ENUM('Pending', 'Completed', 'Refunded') DEFAULT 'Pending',
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

-- 9. REPORT
CREATE TABLE Report (
    ReportID INT AUTO_INCREMENT PRIMARY KEY,
    StaffID INT NOT NULL, -- generated by staff
    ApprovedByAdminID INT, -- approved by admin
    ReportType VARCHAR(100),
    DateGenerated DATE NOT NULL,
    Description TEXT,
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID),
    FOREIGN KEY (ApprovedByAdminID) REFERENCES Admin(AdminID)
);
